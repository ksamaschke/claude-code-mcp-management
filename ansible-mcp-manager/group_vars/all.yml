---
# MCP Server Groups
mcp_server_groups:
  development:
    - git
    - github
    - gitlab
    - puppeteer
    - desktop-commander
  
  engineering:
    # - ansible  # Use mcp-cli-adapter with ansible commands
    - ssh
    - filesystem
    - mcp-cli-adapter
  
  documentation:
    - markitdown
    - pandoc
    - memory
    - Context7
  
  office:
    # - pdf-tools  # Not available yet
    - markitdown
    - pandoc
  
  search:
    - brave-search
    - Context7
  
  core:
    - memory
    - sequential-thinking
    - desktop-commander

# MCP Server Configurations
# Each server can be enabled/disabled in the inventory file
# Supports multiple deployment types: npm, docker, python, binary, source

mcp_servers:
  brave-search:
    enabled: "{{ mcp_servers_enabled.brave_search | default(true) }}"
    command: "npx @modelcontextprotocol/server-brave-search"
    args: []
    env:
      BRAVE_API_KEY: "{{ brave_api_key | default('') }}"
    requires_env:
      - BRAVE_API_KEY

  Context7:
    enabled: "{{ mcp_servers_enabled.context7 | default(true) }}"
    command: "npx @upstash/context7-mcp@latest"
    args: []

  puppeteer:
    enabled: "{{ mcp_servers_enabled.puppeteer | default(true) }}"
    command: "npx @modelcontextprotocol/server-puppeteer"
    args: []

  desktop-commander:
    enabled: "{{ mcp_servers_enabled.desktop_commander | default(true) }}"
    command: "npx @wonderwhy-er/desktop-commander"
    args: []

  sequential-thinking:
    enabled: "{{ mcp_servers_enabled.sequential_thinking | default(true) }}"
    command: "npx @modelcontextprotocol/server-sequential-thinking"
    args: []

  git:
    enabled: "{{ mcp_servers_enabled.git | default(true) }}"
    command: "npx @cyanheads/git-mcp-server"
    args: []

  github:
    enabled: "{{ mcp_servers_enabled.github | default(true) }}"
    command: "npx @modelcontextprotocol/server-github"
    args: []
    env:
      GITHUB_PERSONAL_ACCESS_TOKEN: "{{ github_pat | default('') }}"
    requires_env:
      - GITHUB_PERSONAL_ACCESS_TOKEN

  gitlab:
    enabled: "{{ mcp_servers_enabled.gitlab | default(true) }}"
    command: "npx @yoda.digital/gitlab-mcp-server"
    args: []
    env:
      GITLAB_PERSONAL_ACCESS_TOKEN: "{{ gitlab_pat | default('') }}"
      GITLAB_API_URL: "{{ gitlab_url | default('https://gitlab.com/api/v4') }}"
    requires_env:
      - GITLAB_PERSONAL_ACCESS_TOKEN

  markitdown:
    enabled: "{{ mcp_servers_enabled.markitdown | default(true) }}"
    command: "uvx"
    args:
      - "markitdown-mcp"

  memory:
    enabled: "{{ mcp_servers_enabled.memory | default(true) }}"
    command: "npx @modelcontextprotocol/server-memory"
    args: []

  pandoc:
    enabled: "{{ mcp_servers_enabled.pandoc | default(true) }}"
    command: "uvx"
    args:
      - "mcp-pandoc"

  # pdf-tools: (no npm package available)
  #   enabled: "{{ mcp_servers_enabled.pdf_tools | default(false) }}"
  #   command: "npx @modelcontextprotocol/server-pdf-tools"
  #   args: []

  # ansible: (no direct MCP server available, use mcp-shell-server with ansible commands)
  #   enabled: "{{ mcp_servers_enabled.ansible | default(false) }}"
  #   command: "uvx"
  #   args:
  #     - "mcp-shell-server"
  #   env:
  #     ALLOW_COMMANDS: "ansible,ansible-playbook,ansible-galaxy,ansible-vault"

  filesystem:
    enabled: "{{ mcp_servers_enabled.filesystem | default(true) }}"
    command: "npx @modelcontextprotocol/server-filesystem"
    args: []

  mcp-cli-adapter:
    enabled: "{{ mcp_servers_enabled.mcp_cli_adapter | default(true) }}"
    command: "uvx"
    args:
      - "mcp-shell-server"
    env:
      ALLOW_COMMANDS: "{{ shell_allowed_commands | default('ls,cat,pwd,grep,wc,find,echo,head,tail,sort,uniq') }}"

  ssh:
    enabled: "{{ mcp_servers_enabled.ssh | default(true) }}"
    command: "npx @fangjunjie/ssh-mcp-server"
    args: []

# Project configuration
claude_project_path: "{{ project_path | default('/home/karsten/Work') }}"

# Backup settings
backup_claude_config: true
backup_suffix: ".ansible-backup"

# NPM settings (for installing MCP server packages if needed)
npm_install_global: false
npm_prefix: "{{ ansible_env.HOME }}/.npm-global"

# Disabled MCP servers (these will be added to disabledMcpjsonServers in settings)
mcp_disabled_servers: []
# Example:
# mcp_disabled_servers:
#   - ansible
#   - pandoc

# Shell commands allowed for mcp-cli-adapter (mcp-shell-server)
shell_allowed_commands: "ls,cat,pwd,grep,wc,find,echo,head,tail,sort,uniq,date,whoami,which,tree"

# Example custom MCP server configurations
# These show different deployment types you can add to mcp_servers above:
mcp_server_examples:
  # Docker-based server
  docker-example:
    enabled: false
    command: "docker"
    args:
      - "run"
      - "--rm"
      - "-i"
      - "myorg/mcp-server:latest"
    env:
      API_KEY: "{{ docker_api_key | default('') }}"
  
  # Python-based server
  python-example:
    enabled: false
    command: "python"
    args:
      - "-m"
      - "mcp_server_module"
    env:
      CONFIG_PATH: "/path/to/config"
  
  # Binary executable
  binary-example:
    enabled: false
    command: "/usr/local/bin/mcp-custom-server"
    args:
      - "--mode=stdio"
  
  # Source-based (requires path to script)
  source-example:
    enabled: false
    command: "node"
    args:
      - "/home/user/projects/my-mcp-server/index.js"
  
  # UV-based Python server
  uv-python-example:
    enabled: false
    command: "uvx"
    args:
      - "mcp-server-package"